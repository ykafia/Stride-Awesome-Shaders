namespace Stride.Noises
{
    shader VoronoiNoise2D<float Scale, float MinDist> : NoiseBase
    {
        override float ComputeNoise(float2 p)
        {
            return ComputeDist(p);
        }
        float ComputeDist(float2 p)
        {
            float2 st = p;
            float3 color = float3(0,0,0);


            // float2 st = gl_FragCoord.xy/u_resolution.xy;
            // st.x *= u_resolution.x/u_resolution.y;
            // float3 color = float3(0,0,0);

            // Scale
            st *= Scale;

            // Tile the space
            float2 i_st = floor(st);
            float2 f_st = frac(st);

            float m_dist = MinDist;  // minimum distance

            for (int y= -1; y <= 1; y++) {
                for (int x= -1; x <= 1; x++) {
                    // Neighbor place in the grid
                    float2 neighbor = float2(float(x),float(y));

                    // Random position from current + neighbor place in the grid
                    float2 pointV = Random2(i_st + neighbor);

                    // Animate the point
                    pointV = 0.5 + 0.5*sin(Global.Time + 6.2831*pointV);

                    // Vector between the pixel and the point
                    float2 diff = neighbor + pointV - f_st;

                    // Distance to the point
                    float dist = length(diff);

                    // Keep the closer distance
                    m_dist = min(m_dist, dist);
                }
            }

            return m_dist;
        }
    };
}

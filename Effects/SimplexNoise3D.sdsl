namespace Stride.Awesome.Shaders
{
    shader SimplexNoise3D : Texturing, ComputeColor, PositionStream4
    {

        float3 Random3(float3 c) {
            float j = 4096.0*sin(dot(c,float3(17.0, 59.4, 15.0)));
            float3 r;
            r.z = frac(512.0*j);
            j *= .125;
            r.x = frac(512.0*j);
            j *= .125;
            r.y = frac(512.0*j);
            return r-0.5;
        }

        float Simplex3d(float3 p) {

            const float F3 =  0.3333333;
            const float G3 =  0.1666667;

            /* 1. find current tetrahedron T and it's four vertices */
            /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
            /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/
            
            /* calculate s and x */
            float3 s = floor(p + dot(p, float3(F3,F3,F3)));
            float3 x = p - s + dot(s, float3(G3,G3,G3));
            
            /* calculate i1 and i2 */
            float3 e = step(float3(0,0,0), x - x.yzx);
            float3 i1 = e*(1.0 - e.zxy);
            float3 i2 = 1.0 - e.zxy*(1.0 - e);
                
            /* x1, x2, x3 */
            float3 x1 = x - i1 + G3;
            float3 x2 = x - i2 + 2.0*G3;
            float3 x3 = x - 1.0 + 3.0*G3;
            
            /* 2. find four surflets and store them in d */
            float4 w, d;
            
            /* calculate surflet weights */
            w.x = dot(x, x);
            w.y = dot(x1, x1);
            w.z = dot(x2, x2);
            w.w = dot(x3, x3);
            
            /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
            w = max(0.6 - w, 0.0);
            
            /* calculate surflet components */
            d.x = dot(Random3(s), x);
            d.y = dot(Random3(s + i1), x1);
            d.z = dot(Random3(s + i2), x2);
            d.w = dot(Random3(s + 1.0), x3);
            
            /* multiply d by w^4 */
            w *= w;
            w *= w;
            d *= w;
            
            /* 3. return the sum of the four surflets */
            return dot(d, float4(52.0,52.0,52.0,52.0));
        }

        float Simplex3d_fractal(float3 m) {
            float3x3 rot1 = float3x3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);
            float3x3 rot2 = float3x3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);
            float3x3 rot3 = float3x3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);
            return   0.5333333*Simplex3d(mul(m,rot1))
                    +0.2666667*Simplex3d(2.0*mul(m,rot2))
                    +0.1333333*Simplex3d(4.0*mul(m,rot3))
                    +0.0666667*Simplex3d(8.0*m);
        }


        override float4 Compute()
        {
            float2 p = streams.TexCoord;
            float3 p3 = streams.PositionWS.xyz;//float3(p, Global.Time*0.025);
            
            float value;
            
            // if (p.x <= 0.6) {
            //     value = Simplex3d(p3*32.0);
            // } else {
            //     value = Simplex3d_fractal(p3*8.0+8.0);
            // }
            value = Simplex3d_fractal(p3*8.0+8.0);
            value = 0.5 + 0.5*value;
            // value *= smoothstep(0.0, 0.005, abs(0.6-p.x)); // hello, iq :)
            
            return float4(float3(value,value,value),1.0);
        }
       
    };
}